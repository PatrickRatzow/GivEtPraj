@using System.Runtime.InteropServices.ComTypes
<div class="flex flex-row relative h-full">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>

@if (CurrentStepIsHidden())
{
    <StepIndicator Steps="@Steps.Count()" CurrentStep="_currentStep"/>    
}

@code {
    private int _currentStep;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    private List<Step> _steps = new();

    private IEnumerable<Step> Steps => _steps.Where(x => x.Hidden != true);

    public void AddStep(Step step)
    {
        _steps.Add(step);

        StateHasChanged();
    }

    private bool CurrentStepIsHidden()
    {
        if (_currentStep == 0) return false;

        return true;
    }
    
    public void NextPage()
    {
        if (_currentStep == _steps.Count - 1)
            return;

        _currentStep++;

        HandleOffset();

        StateHasChanged();
    }

    public void PreviousPage()
    {
        if (_currentStep == 0)
            return;

        _currentStep--;

        HandleOffset();

        StateHasChanged();
    }

    public void GoToPage<TPage>() where TPage : Step
    {
        for (var i = 0; i < _steps.Count; i++)
        {
            var step = _steps[i];
            if (step is not TPage) continue;

            _currentStep = i;

            HandleOffset();

            StateHasChanged();

            return;
        }
    }

    private void HandleOffset()
    {
        for (var i = 0; i < _steps.Count; i++)
        {
            var step = _steps[i];
            var diff = _currentStep - i;
            if (diff <= 0)
            {
                step.Offset = "";

                continue;
            }

            step.Offset = "ml-[-100vw]";
        }
    }

}