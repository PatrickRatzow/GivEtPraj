@page "/create-page"
@using Commentor.GivEtPraj.Blazor.Services
@using Commentor.GivEtPraj.WebApi.Contracts.Requests
@using Commentor.GivEtPraj.Application.Contracts
@using BrowserInterop.Geolocation

<PageTitle>Opret Praj</PageTitle>

<div>
    @if (HasSentCase)
    {
        <h1 style="color:limegreen;text-align:center;">Tak for prajet!</h1>
    }
    else
    {
        <EditForm name="rate" Model="@model" OnValidSubmit="SubmitCase">
            <FluentValidationValidator/>
            <ValidationSummary/>
            <h1>Giv Et Praj!</h1>

            <div>
                <label>Titel</label>
                <InputText @bind-Value="@model.Title"/>
                <ValidationMessage For="@(() => @model.Title)"/>
            </div>
            <div>
                <label>Beskrivelse</label>
                <InputText @bind-Value="@model.Description"/>
                <ValidationMessage For="@(() => model.Description)"/>
            </div>
            <div>
                <label>Categori</label>
                <InputRadioGroup @bind-Value="@model.Category">
                    @foreach (var category in Categories)
                    {
                        <InputRadio Value="category.Name"/>
                        @category.Name
                    }
                </InputRadioGroup>
                <ValidationMessage For="@(() => model.Category)"/>

            </div>

            <div>
                <button @onclick="GetLatLong">Get location</button>
                <text>@Latitude</text><br/>
                <text>@Longitude</text>
            </div>


            <button type="submit">Giv Prajet</button>
            selected category: @model.Category
        </EditForm>
    }

</div>

@code {
    private ElementReference _input;

    [Inject]
    private ICaseService CaseService { get; set; }

    [Inject]
    private ImageUpload ImageUpload { get; set; }

    [Inject]
    private IGeoLocationService GeoLocationService { get; set; }

    [Inject]
    private ICategoryService CategoryService { get; set; }

    private string Title { get; set; }
    private string Description { get; set; }
    private double Latitude { get; set; }
    private double Longitude { get; set; }
    private bool HasSentCase { get; set; }
    private string SelectedCategory { get; set; }
    private IList<string> ImagesData = new List<string>();
    private IList<CategoryDto> Categories = new List<CategoryDto>();
    private CreateCaseRequest model = new();

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryService.GetAllCategories();
    }

    private async Task SubmitCase()
    {
        await CaseService.CreateCase(Title, Description, ImagesData, SelectedCategory);

        HasSentCase = true;
    }

    private async Task UpdateImages()
    {
        ImagesData = await ImageUpload.GetFilesUploaded(_input);
    }

    private async Task GetLatLong()
    {
        GeolocationResult geoLocation = await GeoLocationService.GetCoords();
        Latitude = geoLocation.Location.Coords.Latitude;
        Longitude = geoLocation.Location.Coords.Longitude;
    }


    private class Model
    {
        public string SelectedCategory { get; set; }
    }

}