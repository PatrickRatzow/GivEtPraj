@page "/create-page"
@using BrowserInterop.Geolocation
@using Commentor.GivEtPraj.Blazor.Component.Modal
@using Commentor.GivEtPraj.Blazor.Services
@using Commentor.GivEtPraj.WebApi.Contracts.Requests
@using Commentor.GivEtPraj.Application.Contracts
@using BrowserInterop.Geolocation

<PageTitle>Opret Praj</PageTitle>

<div>
    @if (HasSentCase)
    {
        <h1 style="color:limegreen;text-align:center;">Tak for prajet!</h1>
    }
    else
    {
        <EditForm Model="@_caseRequest" OnValidSubmit="SubmitCase">
            <FluentValidationValidator @ref="@_fluentValidationValidator"/>
            <ValidationSummary/>
            <h1>Giv Et Praj!</h1>

            <div>
                <label>Titel</label>
                <InputText @bind-Value="@_caseRequest.Title"/>
                <ValidationMessage For="@(() => _caseRequest.Title)"/>
            </div>
            <div>
                <label>Beskrivelse</label>
                <InputText @bind-Value="@_caseRequest.Description"/>
                <ValidationMessage For="@(() => _caseRequest.Description)"/>
            </div>
            <div>
                <label>Categori</label>
                <InputRadioGroup @bind-Value="@_caseRequest.Category">
                    @foreach (var category in Categories)
                    {
                        <InputRadio Value="category.Name"/>
                        @category.Name
                    }
                </InputRadioGroup>
                <ValidationMessage For="@(() => _caseRequest.Category)"/>

        </div>

        <div>
            @if (!HasCameraPermission)
                {
                 <ConfirmModal/>  
                 @GetLocationError();
                                 <button type="button" @onclick="GetLatLong">Get location</button>
                <text>@_caseRequest.Latitude</text><br />
                <text>@_caseRequest.Longitude</text>
                } 
             else
               {
                <button type="button" @onclick="GetLatLong">Get location</button>
                <text>@_caseRequest.Latitude</text><br />
                <text>@_caseRequest.Longitude</text>
               }
            </div>

            

            <div id="TakeImage">

                <Camera OnElementAdded="ImagesListElementAdded"></Camera>

                <ImageHolder OnImageRemoved="RemoveImage" Images="@_caseRequest.Images"></ImageHolder>

                <ValidationMessage For="@(() => _caseRequest.Images)"/>
            </div>

            <ReCaptchaV2 ReCaptchaResultGotten="RecaptchaCompleted"></ReCaptchaV2>
            <p>@_reCaptchaResp</p>


            <button type="submit">Giv Prajet</button>
            selected category: @_caseRequest.Category
        </EditForm>
    }

</div>

@code {
    private FluentValidationValidator _fluentValidationValidator;
    private ElementReference _input;

    [Inject]
    private ICaseService CaseService { get; set; }

    [Inject]
    private ImageUpload ImageUpload { get; set; }

    [Inject]
    private IGeoLocationService GeoLocationService { get; set; }

    [Inject]
    private ICategoryService CategoryService { get; set; }

    private bool HasSentCase { get; set; }
    private string _reCaptchaResp = "";
    private IList<CategoryDto> Categories = new List<CategoryDto>();
    private CreateCaseRequest _caseRequest = new();

    private bool HasCameraPermission { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryService.GetAllCategories();
        GetLatLong();
    }

    private async Task SubmitCase()
    {
        await CaseService.CreateCase(_caseRequest, _reCaptchaResp);

        HasSentCase = true;
    }

    private async Task UpdateImages()
    {
        _caseRequest.Images = await ImageUpload.GetFilesUploaded(_input);
    }

    private string GetLocationError()
    {
       return GeoLocationService.GetLocationError();
    }

    private async Task GetLatLong()
    {
        try
        {
            GeolocationResult geoLocation = await GeoLocationService.GetCoords();
            _caseRequest.Latitude = geoLocation.Location.Coords.Latitude;
            _caseRequest.Longitude = geoLocation.Location.Coords.Longitude;
        }
        catch (NullReferenceException e)
        {
            var window = await GeoLocationService.GetWindow();
            await window.Console.Log(e.StackTrace);
            await window.Alert(e.Message);
        }
    }

    public void ImagesListElementAdded(string str)
    {
        _caseRequest.Images.Add(str);
    }

    public void RemoveImage(string str)
    {
        _caseRequest.Images.RemoveAll(x => x == str);
    }

    public void RecaptchaCompleted(string str)
    {
        _reCaptchaResp = str;
    }



}