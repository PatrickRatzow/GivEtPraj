@page "/create-page"
@using BrowserInterop.Geolocation
@using Commentor.GivEtPraj.Blazor.Services
@using Commentor.GivEtPraj.Application.Contracts

<PageTitle>Opret Praj</PageTitle>

<div>
    @if (HasSentCase)
    {
        <h1 style="color:limegreen;text-align:center;">Tak for prajet!</h1>
    }
    else
    {
        <EditForm name="rate" Model="@model">
            <h1>Giv Et Praj!</h1>

            <div>
                <label>Titel</label>
                <input type="text" @bind="@Title" />
            </div>
            <div>
                <label>Beskrivelse</label>
                <input type="text" @bind="@Description" />
            </div>
            <div>
                <label>Categori</label>
                <InputRadioGroup @bind-Value="SelectedCategory">
                    @foreach (var category in Categories)
                    {
                    <InputRadio Value="category.Name" />
                    @category.Name
                    }
            </InputRadioGroup>

        </div>

        <div>
            <button @onclick="GetLatLong">Get location</button>
            <text>@Latitude</text><br />
            <text>@Longitude</text>
        </div>

        <div>
            <label>Billeder</label>
            <input type="file" @ref="_input" @onchange="UpdateImages" accept=".jpg, .jpeg, png" />
        </div>

        <div id="TakeImage">

            <Camera OnElementAdded="ImagesListElementAdded"></Camera>

            <ul>
                @foreach (string imgStr in _imagesData)
                    {
                        <li>
                            <img width="320" height="240" src="data:image/png;base64, @imgStr" alt="Red dot">
                        </li>
                    }
                </ul>
            </div>


            <button @onclick="@SubmitCase">Giv Prajet</button>
            selected category: @SelectedCategory
        </EditForm>
    }

</div>

@code {
    private ElementReference _input;
    [Inject] private ICaseService CaseService { get; set; }
    [Inject] private ImageUpload ImageUpload { get; set; }
    [Inject] private IGeoLocationService GeoLocationService { get; set; }
    [Inject] private ICategoryService CategoryService { get; set; }
    private string Title { get; set; }
    private string Description { get; set; }
    private double Latitude { get; set; }
    private double Longitude { get; set; }
    private bool HasSentCase { get; set; }
    private string SelectedCategory { get; set; }
    private IList<string> _imagesData = new List<string>();
    private IList<CategoryDto>? Categories = new List<CategoryDto>();
    private Model model = new Model();

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryService.GetAllCategories();
    }

    private async Task SubmitCase()
    {
        await CaseService.CreateCase(Title, Description, _imagesData, SelectedCategory, Longitude, Latitude);

        HasSentCase = true;
    }

    private async Task UpdateImages()
    {
        _imagesData = await ImageUpload.GetFilesUploaded(_input);
    }

    private async Task GetLatLong()
    {
        GeolocationResult geoLocation = await GeoLocationService.GetCoords();
        Latitude = geoLocation.Location.Coords.Latitude;
        Longitude = geoLocation.Location.Coords.Longitude;
    }

    private class Model
    {
        public string SelectedCategory { get; set; }
    }

    public async Task ImagesListElementAdded(string str)
    {
        _imagesData.Add(str);
    }
}