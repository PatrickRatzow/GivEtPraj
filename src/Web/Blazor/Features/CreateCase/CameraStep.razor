@using Commentor.GivEtPraj.Blazor.Components
@using Commentor.GivEtPraj.Blazor.Services
@using Commentor.GivEtPraj.WebApi.Contracts.Requests
@inherits Step

<div class="w-[calc(100vw-2rem)] transition-all flex flex-col mr-8 h-full relative @Offset">
    @if (_viewGalleryModal)
    {
        <ImageGalleryModal Images=@Model.Images OnImageRemoved=RemoveImage ToggleModal=ToggleModal CssClass="z-50 bg-black absolute -my-2 -mx-4 w-screen h-screen"></ImageGalleryModal>
    }
    <div class="z-0 absolute w-screen h-screen bg-black inset-0 -my-2 -mx-4 pointer-events-none"></div>
    <video class="z-10 absolute -mx-4 w-screen top-1/2 transform -translate-y-1/2" id="video" autoplay></video>

    <div class="flex flex-col justify-between h-[calc(100vh-1rem)] z-10">
        <Header CssClass="z-10 text-white" Title="Billeder" Icon="fas fa-chevron-left" OnBackClicked="Parent.PreviousPage"></Header>

        <div class="flex flex-row justify-between mx-8 mb-10 items-center">
            <button class="rounded-full z-10" type="button" @onclick="FlipCamera">
                <i class="text-white fal fa-sync text-4xl"></i>
            </button>
            <button class="bg-white-500 rounded-full w-16 h-16 border-4 border-white z-10" type="button" id="click-photo" @onclick="TakePhoto"></button>
            <button class="rounded-full w-14 h-14 z-10 bg-black border-2 border-gray-200" type="button" @onclick="ToggleModal">
                @if (Model.Images.Count == 0)
                {
                    <i class="fas fa-file-image text-white text-2xl z-20"></i>
                }
                else
                {
                    <Base64Img CssClass="rounded-full w-13 h-13" Src="@Model.Images.Last()"></Base64Img>

                }
            </button>
        </div>
    </div>
</div>

@code {
    private bool _viewGalleryModal = false;
    [Parameter] public CreateCaseRequest Model { get; set; } = null!;
    [Inject] private ICameraService CameraService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CameraService.GetCameraFeed();
    }

    private async Task TakePhoto()
    {
        Model.Images.Add(await CameraService.TakePhoto());
    }

    private async Task FlipCamera()
    {
        await CameraService.FlipCamera();
    }
    
    private void ToggleModal()
    {
        if ((Model.Images.Count > 0 && !_viewGalleryModal) || _viewGalleryModal)
            _viewGalleryModal = !_viewGalleryModal;
    }

    private void RemoveImage(string str)
    {
        Model.Images.Remove(str);
    }
}
